package com.rewards.rewardcalculate.model;

import jakarta.persistence.*;
import java.time.LocalDate;

/**
 * Entity class representing a transaction record in the system.
 * <p>
 * This class is mapped to the "transactions" table in the database
 * and contains fields for transaction ID, customer ID, transaction date, and amount.
 */
@Entity
@Table(name = "transactions")
public class Transaction {

    /**
     * Unique identifier for the transaction.
     * It is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * ID of the customer who made the transaction.
     * This field cannot be null.
     */
    @Column(nullable = false)
    private String customerId;

    /**
     * The date on which the transaction occurred.
     * This field cannot be null.
     */
    @Column(nullable = false)
    private LocalDate transactionDate;

    /**
     * The monetary amount of the transaction.
     * This field cannot be null.
     */
    @Column(nullable = false)
    private double amount;

    /**
     * Default no-argument constructor required by JPA.
     */
    public Transaction() {

    }

    /**
     * Constructs a Transaction object with the specified customer ID, date, and amount.
     *
     * @param customerId       the ID of the customer who made the transaction
     * @param transactionDate  the date of the transaction
     * @param amount           the transaction amount
     */
    public Transaction(String customerId, LocalDate transactionDate, double amount) {
        this.customerId = customerId;
        this.transactionDate = transactionDate;
        this.amount = amount;
    }

    /**
     * Returns the ID of the transaction.
     *
     * @return transaction ID
     */
    public Long getId() {
        return id;
    }

    /**
     * Returns the customer ID associated with the transaction.
     *
     * @return customer ID
     */
    public String getCustomerId() {
        return customerId;
    }

    /**
     * Returns the date of the transaction.
     *
     * @return transaction date
     */
    public LocalDate getTransactionDate() {
        return transactionDate;
    }

    /**
     * Returns the amount of the transaction.
     *
     * @return transaction amount
     */
    public double getAmount() {
        return amount;
    }
}
